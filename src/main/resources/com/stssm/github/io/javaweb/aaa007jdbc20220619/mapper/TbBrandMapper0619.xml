<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stssm.github.io.javaweb.aaa007jdbc20220619.mapper.TbBrandMapper0619">
	<resultMap id="BaseResultMap" type="com.stssm.github.io.javaweb.aaa007jdbc20220619.pojo.TbBrand0619">
		<!--@mbg.generated-->
		<!--@Table tb_brand-->
		<id column="id" jdbcType="INTEGER" property="id"/>
		<result column="brand_name" jdbcType="VARCHAR" property="brandName"/>
		<result column="company_name" jdbcType="VARCHAR" property="companyName"/>
		<result column="ordered" jdbcType="INTEGER" property="ordered"/>
		<result column="description" jdbcType="VARCHAR" property="description"/>
		<result column="status" jdbcType="INTEGER" property="status"/>
	</resultMap>
	<sql id="Base_Column_List">
		<!--@mbg.generated-->
		id,
		brand_name,
		company_name,
		ordered,
		description,
		`status`
	</sql>


	<select id="selectById" parameterType="int" resultMap="BaseResultMap">
		<!--这里的参数类型，可以设置也可以省略，主要是便于识别参数的种类-->
		select *
		from tb_brand
		where id = #{id};
		<!--接口必须是带参方法，否则id会无法识别-->
		<!--select * from tb_brand where id=${id};-->
		<!--这里可以是井号，也可以是美元符-->
		<!--如果是美元符，可能存在SQL注入的问题，但是井号就直接替换，安全性比较好-->
		<!--一般对于变量，表格列，会使用美元符-->
		<!--但是表名，就使用美元符-->
	</select>

	<select id="selectByDy" resultMap="BaseResultMap">
		<!--select * from tb_brand where id > #{id};-->
		<!--这里如果出现大于号，是没有问题的-->
		<!--select * from tb_brand where id < #{id};-->
		<!--但是出现小于号，就会报错，因为xml小于号是标签的开始符号-->
		<!--这个时候可以使用转义符或者cdta区来解决-->
		select *
		from tb_brand
		where id &lt; #{id};
		<!--上面这个是转义符-->
		select *
		from tb_brand
		where id <![CDATA[<]]> #{id};
		<!--上面这个是cdta区域-->
	</select>

	<select id="queryTotal" resultMap="BaseResultMap">
		select *
		from tb_brand
		where status = #{status}
		and company_name like #{companyName}
		and brand_name like #{brandName};
	</select>

	<select id="queryTotal2" resultMap="BaseResultMap">
		select *
		from tb_brand
		where status = #{status}
		and company_name like #{companyName}
		and brand_name like #{brandName};
	</select>

	<select id="queryTotal3" resultMap="BaseResultMap">
		select *
		from tb_brand
		where status = #{status}
		and company_name like #{companyName}
		and brand_name like #{brandName};
		<!--其实这里是有bug的，用户必须同时输入三个信息，才能查到结果-->
		<!--实际上正常人不会这么干-->
	</select>

	<select id="queryTotal4" resultMap="BaseResultMap">
		select *
		from tb_brand where
		<if test="status != null">
			status = #{status}
		</if>
		<!--下面有几个注意点-->
		<!--首先，if当中的是值，是前端传过来的-->
		<if test="companyName != null and companyName != ''">
			and company_name like #{companyName}
		</if>
		<!--然后，多个if 的内部，实际上就是SQL语句，多个SQL之间需要使用and来连接-->
		<!--但是这里也有个问题-->
		<!--如果我的status不存在，那么SQL会执行报错-->
		<if test="brandName != null and brandName != ''">
			and brand_name like #{brandName}
		</if>
	</select>

	<select id="queryTotal5" resultMap="BaseResultMap">
		<!--一种解决办法是，在里面加一个恒等式，避免and连接错误-->
		select *
		from tb_brand where 1 = 1
		<if test="status != null">
			and status = #{status}
		</if>
		<if test="companyName != null and companyName != ''">
			and company_name like #{companyName}
		</if>
		<if test="brandName != null and brandName != ''">
			and brand_name like #{brandName}
		</if>
	</select>

	<select id="queryTotal6" resultMap="BaseResultMap">
		<!--第二种解决办法，直接使用where标签-->
		<!--where标签，会自动连接，然后把里面多余的and连接符直接删除-->
		select *
		from tb_brand
		<where>
			<if test="status != null">
				and status = #{status}
			</if>
			<if test="companyName != null and companyName != ''">
				and company_name like #{companyName}
			</if>
			<if test="brandName != null and brandName != ''">
				and brand_name like #{brandName}
			</if>
		</where>
	</select>


	<select id="querySingleCondition" resultMap="BaseResultMap">
		select *
		from tb_brand
		<where>
			<choose>
				<!--这里的choose相当于Switch——case-->
				<when test="status != null">
					and status like #{status}
				</when>
				<!--同样的，Switch——case的毛病也被继承下来了-->
				<!--如果我进入了第一个条件，那么后续的就不会继续执行的-->
				<when test="companyName != null and companyName != ''">
					and company_name like #{companyName}
				</when>
				<when test="brandName != null and brandName != ''">
					and brand_name like #{brandName}
				</when>
				<otherwise>
					and 1 = 1
				</otherwise>
				<!--有where标签存在的情况下，这里的otherwise是可以不要的-->
			</choose>
		</where>
		;
	</select>

	<insert id="mybatisInsert">
		insert into tb_brand (brand_name, company_name, ordered, description, status)
		values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
	</insert>

	<insert id="mybatisInsert2" useGeneratedKeys="true" keyProperty="id">
		<!--要获取对象绑定的主键-->
		<!--这里需要设置这两个属性，一个是打开useGeneratedKeys，一个是绑定主键的字段名keyProperty-->
		insert into tb_brand (brand_name, company_name, ordered, description, status)
		values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
	</insert>

	<update id="mybatisChange">
		update tb_brand
		set company_name = #{companyName},
		brand_name = #{brandName},
		status = #{status},
		description = #{description},
		ordered = #{ordered}
		where id = #{id};
	</update>

	<update id="mybatisChange2">
		update tb_brand
		<set>
			<if test="brandName != null and brandName != ''">
				brand_name = #{brandName},
			</if>
			<if test="ordered != null and ordered != ''">
				ordered = #{ordered},
			</if>
			<if test="description != null and description != ''">
				description = #{description},
			</if>
			<if test="status != null and status != ''">
				status = #{status},
			</if>
			<if test="companyName != null and companyName != ''">
				company_name = #{companyName},
			</if>
		</set>
		where id = #{id};
	</update>

	<select id="selectAnnotate" >
	</select>
</mapper>
